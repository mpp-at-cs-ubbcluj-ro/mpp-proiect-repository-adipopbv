package pr1Java.networking.thrift.datatransfer;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-04-15")
public class GameDto implements org.apache.thrift.TBase<GameDto, GameDto._Fields>, java.io.Serializable, Cloneable, Comparable<GameDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pr1Java.networking.thrift.dataTransfer.GameDto");

  private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOME_TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("homeTeam", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AWAY_TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("awayTeam", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AVAILABLE_SEATS_FIELD_DESC = new org.apache.thrift.protocol.TField("availableSeats", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SEAT_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("seatCost", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GameDtoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GameDtoTupleSchemeFactory();

  public int gameId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String homeTeam; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String awayTeam; // required
  public int availableSeats; // required
  public int seatCost; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GAME_ID((short)1, "gameId"),
    NAME((short)2, "name"),
    HOME_TEAM((short)3, "homeTeam"),
    AWAY_TEAM((short)4, "awayTeam"),
    AVAILABLE_SEATS((short)5, "availableSeats"),
    SEAT_COST((short)6, "seatCost");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GAME_ID
          return GAME_ID;
        case 2: // NAME
          return NAME;
        case 3: // HOME_TEAM
          return HOME_TEAM;
        case 4: // AWAY_TEAM
          return AWAY_TEAM;
        case 5: // AVAILABLE_SEATS
          return AVAILABLE_SEATS;
        case 6: // SEAT_COST
          return SEAT_COST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GAMEID_ISSET_ID = 0;
  private static final int __AVAILABLESEATS_ISSET_ID = 1;
  private static final int __SEATCOST_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOME_TEAM, new org.apache.thrift.meta_data.FieldMetaData("homeTeam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AWAY_TEAM, new org.apache.thrift.meta_data.FieldMetaData("awayTeam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVAILABLE_SEATS, new org.apache.thrift.meta_data.FieldMetaData("availableSeats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEAT_COST, new org.apache.thrift.meta_data.FieldMetaData("seatCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GameDto.class, metaDataMap);
  }

  public GameDto() {
  }

  public GameDto(
    int gameId,
    java.lang.String name,
    java.lang.String homeTeam,
    java.lang.String awayTeam,
    int availableSeats,
    int seatCost)
  {
    this();
    this.gameId = gameId;
    setGameIdIsSet(true);
    this.name = name;
    this.homeTeam = homeTeam;
    this.awayTeam = awayTeam;
    this.availableSeats = availableSeats;
    setAvailableSeatsIsSet(true);
    this.seatCost = seatCost;
    setSeatCostIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GameDto(GameDto other) {
    __isset_bitfield = other.__isset_bitfield;
    this.gameId = other.gameId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetHomeTeam()) {
      this.homeTeam = other.homeTeam;
    }
    if (other.isSetAwayTeam()) {
      this.awayTeam = other.awayTeam;
    }
    this.availableSeats = other.availableSeats;
    this.seatCost = other.seatCost;
  }

  public GameDto deepCopy() {
    return new GameDto(this);
  }

  @Override
  public void clear() {
    setGameIdIsSet(false);
    this.gameId = 0;
    this.name = null;
    this.homeTeam = null;
    this.awayTeam = null;
    setAvailableSeatsIsSet(false);
    this.availableSeats = 0;
    setSeatCostIsSet(false);
    this.seatCost = 0;
  }

  public int getGameId() {
    return this.gameId;
  }

  public GameDto setGameId(int gameId) {
    this.gameId = gameId;
    setGameIdIsSet(true);
    return this;
  }

  public void unsetGameId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GAMEID_ISSET_ID);
  }

  /** Returns true if field gameId is set (has been assigned a value) and false otherwise */
  public boolean isSetGameId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GAMEID_ISSET_ID);
  }

  public void setGameIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GAMEID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public GameDto setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHomeTeam() {
    return this.homeTeam;
  }

  public GameDto setHomeTeam(@org.apache.thrift.annotation.Nullable java.lang.String homeTeam) {
    this.homeTeam = homeTeam;
    return this;
  }

  public void unsetHomeTeam() {
    this.homeTeam = null;
  }

  /** Returns true if field homeTeam is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeTeam() {
    return this.homeTeam != null;
  }

  public void setHomeTeamIsSet(boolean value) {
    if (!value) {
      this.homeTeam = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAwayTeam() {
    return this.awayTeam;
  }

  public GameDto setAwayTeam(@org.apache.thrift.annotation.Nullable java.lang.String awayTeam) {
    this.awayTeam = awayTeam;
    return this;
  }

  public void unsetAwayTeam() {
    this.awayTeam = null;
  }

  /** Returns true if field awayTeam is set (has been assigned a value) and false otherwise */
  public boolean isSetAwayTeam() {
    return this.awayTeam != null;
  }

  public void setAwayTeamIsSet(boolean value) {
    if (!value) {
      this.awayTeam = null;
    }
  }

  public int getAvailableSeats() {
    return this.availableSeats;
  }

  public GameDto setAvailableSeats(int availableSeats) {
    this.availableSeats = availableSeats;
    setAvailableSeatsIsSet(true);
    return this;
  }

  public void unsetAvailableSeats() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AVAILABLESEATS_ISSET_ID);
  }

  /** Returns true if field availableSeats is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableSeats() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AVAILABLESEATS_ISSET_ID);
  }

  public void setAvailableSeatsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AVAILABLESEATS_ISSET_ID, value);
  }

  public int getSeatCost() {
    return this.seatCost;
  }

  public GameDto setSeatCost(int seatCost) {
    this.seatCost = seatCost;
    setSeatCostIsSet(true);
    return this;
  }

  public void unsetSeatCost() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEATCOST_ISSET_ID);
  }

  /** Returns true if field seatCost is set (has been assigned a value) and false otherwise */
  public boolean isSetSeatCost() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEATCOST_ISSET_ID);
  }

  public void setSeatCostIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEATCOST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case GAME_ID:
      if (value == null) {
        unsetGameId();
      } else {
        setGameId((java.lang.Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case HOME_TEAM:
      if (value == null) {
        unsetHomeTeam();
      } else {
        setHomeTeam((java.lang.String)value);
      }
      break;

    case AWAY_TEAM:
      if (value == null) {
        unsetAwayTeam();
      } else {
        setAwayTeam((java.lang.String)value);
      }
      break;

    case AVAILABLE_SEATS:
      if (value == null) {
        unsetAvailableSeats();
      } else {
        setAvailableSeats((java.lang.Integer)value);
      }
      break;

    case SEAT_COST:
      if (value == null) {
        unsetSeatCost();
      } else {
        setSeatCost((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GAME_ID:
      return getGameId();

    case NAME:
      return getName();

    case HOME_TEAM:
      return getHomeTeam();

    case AWAY_TEAM:
      return getAwayTeam();

    case AVAILABLE_SEATS:
      return getAvailableSeats();

    case SEAT_COST:
      return getSeatCost();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GAME_ID:
      return isSetGameId();
    case NAME:
      return isSetName();
    case HOME_TEAM:
      return isSetHomeTeam();
    case AWAY_TEAM:
      return isSetAwayTeam();
    case AVAILABLE_SEATS:
      return isSetAvailableSeats();
    case SEAT_COST:
      return isSetSeatCost();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof GameDto)
      return this.equals((GameDto)that);
    return false;
  }

  public boolean equals(GameDto that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_gameId = true;
    boolean that_present_gameId = true;
    if (this_present_gameId || that_present_gameId) {
      if (!(this_present_gameId && that_present_gameId))
        return false;
      if (this.gameId != that.gameId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_homeTeam = true && this.isSetHomeTeam();
    boolean that_present_homeTeam = true && that.isSetHomeTeam();
    if (this_present_homeTeam || that_present_homeTeam) {
      if (!(this_present_homeTeam && that_present_homeTeam))
        return false;
      if (!this.homeTeam.equals(that.homeTeam))
        return false;
    }

    boolean this_present_awayTeam = true && this.isSetAwayTeam();
    boolean that_present_awayTeam = true && that.isSetAwayTeam();
    if (this_present_awayTeam || that_present_awayTeam) {
      if (!(this_present_awayTeam && that_present_awayTeam))
        return false;
      if (!this.awayTeam.equals(that.awayTeam))
        return false;
    }

    boolean this_present_availableSeats = true;
    boolean that_present_availableSeats = true;
    if (this_present_availableSeats || that_present_availableSeats) {
      if (!(this_present_availableSeats && that_present_availableSeats))
        return false;
      if (this.availableSeats != that.availableSeats)
        return false;
    }

    boolean this_present_seatCost = true;
    boolean that_present_seatCost = true;
    if (this_present_seatCost || that_present_seatCost) {
      if (!(this_present_seatCost && that_present_seatCost))
        return false;
      if (this.seatCost != that.seatCost)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + gameId;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetHomeTeam()) ? 131071 : 524287);
    if (isSetHomeTeam())
      hashCode = hashCode * 8191 + homeTeam.hashCode();

    hashCode = hashCode * 8191 + ((isSetAwayTeam()) ? 131071 : 524287);
    if (isSetAwayTeam())
      hashCode = hashCode * 8191 + awayTeam.hashCode();

    hashCode = hashCode * 8191 + availableSeats;

    hashCode = hashCode * 8191 + seatCost;

    return hashCode;
  }

  @Override
  public int compareTo(GameDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetGameId(), other.isSetGameId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameId, other.gameId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHomeTeam(), other.isSetHomeTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeTeam, other.homeTeam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAwayTeam(), other.isSetAwayTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAwayTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awayTeam, other.awayTeam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAvailableSeats(), other.isSetAvailableSeats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableSeats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableSeats, other.availableSeats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSeatCost(), other.isSetSeatCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeatCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seatCost, other.seatCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("pr1Java.networking.thrift.dataTransfer.GameDto(");
    boolean first = true;

    sb.append("gameId:");
    sb.append(this.gameId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeTeam:");
    if (this.homeTeam == null) {
      sb.append("null");
    } else {
      sb.append(this.homeTeam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("awayTeam:");
    if (this.awayTeam == null) {
      sb.append("null");
    } else {
      sb.append(this.awayTeam);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableSeats:");
    sb.append(this.availableSeats);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seatCost:");
    sb.append(this.seatCost);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GameDtoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GameDtoStandardScheme getScheme() {
      return new GameDtoStandardScheme();
    }
  }

  private static class GameDtoStandardScheme extends org.apache.thrift.scheme.StandardScheme<GameDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GameDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gameId = iprot.readI32();
              struct.setGameIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOME_TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.homeTeam = iprot.readString();
              struct.setHomeTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AWAY_TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.awayTeam = iprot.readString();
              struct.setAwayTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AVAILABLE_SEATS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.availableSeats = iprot.readI32();
              struct.setAvailableSeatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEAT_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seatCost = iprot.readI32();
              struct.setSeatCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GameDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
      oprot.writeI32(struct.gameId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.homeTeam != null) {
        oprot.writeFieldBegin(HOME_TEAM_FIELD_DESC);
        oprot.writeString(struct.homeTeam);
        oprot.writeFieldEnd();
      }
      if (struct.awayTeam != null) {
        oprot.writeFieldBegin(AWAY_TEAM_FIELD_DESC);
        oprot.writeString(struct.awayTeam);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AVAILABLE_SEATS_FIELD_DESC);
      oprot.writeI32(struct.availableSeats);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEAT_COST_FIELD_DESC);
      oprot.writeI32(struct.seatCost);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GameDtoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GameDtoTupleScheme getScheme() {
      return new GameDtoTupleScheme();
    }
  }

  private static class GameDtoTupleScheme extends org.apache.thrift.scheme.TupleScheme<GameDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GameDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGameId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetHomeTeam()) {
        optionals.set(2);
      }
      if (struct.isSetAwayTeam()) {
        optionals.set(3);
      }
      if (struct.isSetAvailableSeats()) {
        optionals.set(4);
      }
      if (struct.isSetSeatCost()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetGameId()) {
        oprot.writeI32(struct.gameId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetHomeTeam()) {
        oprot.writeString(struct.homeTeam);
      }
      if (struct.isSetAwayTeam()) {
        oprot.writeString(struct.awayTeam);
      }
      if (struct.isSetAvailableSeats()) {
        oprot.writeI32(struct.availableSeats);
      }
      if (struct.isSetSeatCost()) {
        oprot.writeI32(struct.seatCost);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GameDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.gameId = iprot.readI32();
        struct.setGameIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.homeTeam = iprot.readString();
        struct.setHomeTeamIsSet(true);
      }
      if (incoming.get(3)) {
        struct.awayTeam = iprot.readString();
        struct.setAwayTeamIsSet(true);
      }
      if (incoming.get(4)) {
        struct.availableSeats = iprot.readI32();
        struct.setAvailableSeatsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.seatCost = iprot.readI32();
        struct.setSeatCostIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

