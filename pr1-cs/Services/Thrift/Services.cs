/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Services.Thrift.DataTransfer;
using Thrift;
using Thrift.Collections;
using Thrift.Processor;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;

#pragma warning disable IDE0079 // remove unnecessary pragmas
#pragma warning disable IDE1006 // parts of the code use IDL spelling

namespace Services.Thrift
{
    public class Services
    {
        public interface IAsync
        {
            Task<UserDto> signInUser(string username, string password,
                CancellationToken cancellationToken = default);

            Task signOutUser(string username, CancellationToken cancellationToken = default);

            Task<UserDto> signUpUser(string username, string password,
                CancellationToken cancellationToken = default);

            Task<List<GameDto>> getAllGames(CancellationToken cancellationToken = default);

            Task sellSeats(GameDto game, string clientName, int seatsCount,
                CancellationToken cancellationToken = default);

            Task<List<GameDto>>
                getGamesWithAvailableSeatsDescending(CancellationToken cancellationToken = default);
        }


        public class Client : TBaseClient, IDisposable, IAsync
        {
            public Client(TProtocol protocol) : this(protocol, protocol)
            {
            }

            public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
            {
            }

            public async Task<UserDto> signInUser(string username, string password,
                CancellationToken cancellationToken = default)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("signInUser", TMessageType.Call, SeqId),
                    cancellationToken);

                var args = new InternalStructs.signInUserArgs
                {
                    Username = username,
                    Password = password
                };

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new InternalStructs.signInUserResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success) return result.Success;
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                    "signInUser failed: unknown result");
            }

            public async Task signOutUser(string username, CancellationToken cancellationToken = default)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("signOutUser", TMessageType.Oneway, SeqId),
                    cancellationToken);

                var args = new InternalStructs.signOutUserArgs
                {
                    Username = username
                };

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
            }

            public async Task<UserDto> signUpUser(string username, string password,
                CancellationToken cancellationToken = default)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("signUpUser", TMessageType.Call, SeqId),
                    cancellationToken);

                var args = new InternalStructs.signUpUserArgs
                {
                    Username = username,
                    Password = password
                };

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new InternalStructs.signUpUserResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success) return result.Success;
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                    "signUpUser failed: unknown result");
            }

            public async Task<List<GameDto>> getAllGames(CancellationToken cancellationToken = default)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("getAllGames", TMessageType.Call, SeqId),
                    cancellationToken);

                var args = new InternalStructs.getAllGamesArgs();

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new InternalStructs.getAllGamesResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success) return result.Success;
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                    "getAllGames failed: unknown result");
            }

            public async Task sellSeats(GameDto game, string clientName, int seatsCount,
                CancellationToken cancellationToken = default)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("sellSeats", TMessageType.Call, SeqId),
                    cancellationToken);

                var args = new InternalStructs.sellSeatsArgs
                {
                    Game = game,
                    ClientName = clientName,
                    SeatsCount = seatsCount
                };

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new InternalStructs.sellSeatsResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
            }

            public async Task<List<GameDto>> getGamesWithAvailableSeatsDescending(
                CancellationToken cancellationToken = default)
            {
                await OutputProtocol.WriteMessageBeginAsync(
                    new TMessage("getGamesWithAvailableSeatsDescending", TMessageType.Call, SeqId), cancellationToken);

                var args = new InternalStructs.getGamesWithAvailableSeatsDescendingArgs();

                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);

                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new InternalStructs.getGamesWithAvailableSeatsDescendingResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success) return result.Success;
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult,
                    "getGamesWithAvailableSeatsDescending failed: unknown result");
            }
        }

        public class AsyncProcessor : ITAsyncProcessor
        {
            private readonly IAsync _iAsync;
            private readonly ILogger<AsyncProcessor> _logger;
            protected Dictionary<string, ProcessFunction> processMap_ = new();

            public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
            {
                _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
                _logger = logger;
                processMap_["signInUser"] = signInUser_ProcessAsync;
                processMap_["signOutUser"] = signOutUser_ProcessAsync;
                processMap_["signUpUser"] = signUpUser_ProcessAsync;
                processMap_["getAllGames"] = getAllGames_ProcessAsync;
                processMap_["sellSeats"] = sellSeats_ProcessAsync;
                processMap_["getGamesWithAvailableSeatsDescending"] = getGamesWithAvailableSeatsDescending_ProcessAsync;
            }

            public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                try
                {
                    var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

                    processMap_.TryGetValue(msg.Name, out var fn);

                    if (fn == null)
                    {
                        await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
                        await iprot.ReadMessageEndAsync(cancellationToken);
                        var x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod,
                            "Invalid method name: '" + msg.Name + "'");
                        await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID),
                            cancellationToken);
                        await x.WriteAsync(oprot, cancellationToken);
                        await oprot.WriteMessageEndAsync(cancellationToken);
                        await oprot.Transport.FlushAsync(cancellationToken);
                        return true;
                    }

                    await fn(msg.SeqID, iprot, oprot, cancellationToken);
                }
                catch (IOException)
                {
                    return false;
                }

                return true;
            }

            public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
            {
                return await ProcessAsync(iprot, oprot, CancellationToken.None);
            }

            public async Task signInUser_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot,
                CancellationToken cancellationToken)
            {
                var args = new InternalStructs.signInUserArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new InternalStructs.signInUserResult();
                try
                {
                    result.Success = await _iAsync.signInUser(args.Username, args.Password, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("signInUser", TMessageType.Reply, seqid),
                        cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    var sErr = $"Error occurred in {GetType().FullName}: {ex.Message}";
                    if (_logger != null)
                        _logger.LogError(ex, sErr);
                    else
                        Console.Error.WriteLine(sErr);
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError,
                        " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("signInUser", TMessageType.Exception, seqid),
                        cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }

                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task signOutUser_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot,
                CancellationToken cancellationToken)
            {
                var args = new InternalStructs.signOutUserArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                try
                {
                    await _iAsync.signOutUser(args.Username, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    var sErr = $"Error occurred in {GetType().FullName}: {ex.Message}";
                    if (_logger != null)
                        _logger.LogError(ex, sErr);
                    else
                        Console.Error.WriteLine(sErr);
                }
            }

            public async Task signUpUser_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot,
                CancellationToken cancellationToken)
            {
                var args = new InternalStructs.signUpUserArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new InternalStructs.signUpUserResult();
                try
                {
                    result.Success = await _iAsync.signUpUser(args.Username, args.Password, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("signUpUser", TMessageType.Reply, seqid),
                        cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    var sErr = $"Error occurred in {GetType().FullName}: {ex.Message}";
                    if (_logger != null)
                        _logger.LogError(ex, sErr);
                    else
                        Console.Error.WriteLine(sErr);
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError,
                        " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("signUpUser", TMessageType.Exception, seqid),
                        cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }

                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task getAllGames_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot,
                CancellationToken cancellationToken)
            {
                var args = new InternalStructs.getAllGamesArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new InternalStructs.getAllGamesResult();
                try
                {
                    result.Success = await _iAsync.getAllGames(cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("getAllGames", TMessageType.Reply, seqid),
                        cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    var sErr = $"Error occurred in {GetType().FullName}: {ex.Message}";
                    if (_logger != null)
                        _logger.LogError(ex, sErr);
                    else
                        Console.Error.WriteLine(sErr);
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError,
                        " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("getAllGames", TMessageType.Exception, seqid),
                        cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }

                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task sellSeats_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot,
                CancellationToken cancellationToken)
            {
                var args = new InternalStructs.sellSeatsArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new InternalStructs.sellSeatsResult();
                try
                {
                    await _iAsync.sellSeats(args.Game, args.ClientName, args.SeatsCount, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("sellSeats", TMessageType.Reply, seqid),
                        cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    var sErr = $"Error occurred in {GetType().FullName}: {ex.Message}";
                    if (_logger != null)
                        _logger.LogError(ex, sErr);
                    else
                        Console.Error.WriteLine(sErr);
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError,
                        " Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("sellSeats", TMessageType.Exception, seqid),
                        cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }

                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task getGamesWithAvailableSeatsDescending_ProcessAsync(int seqid, TProtocol iprot,
                TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new InternalStructs.getGamesWithAvailableSeatsDescendingArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new InternalStructs.getGamesWithAvailableSeatsDescendingResult();
                try
                {
                    result.Success = await _iAsync.getGamesWithAvailableSeatsDescending(cancellationToken);
                    await oprot.WriteMessageBeginAsync(
                        new TMessage("getGamesWithAvailableSeatsDescending", TMessageType.Reply, seqid),
                        cancellationToken);
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    var sErr = $"Error occurred in {GetType().FullName}: {ex.Message}";
                    if (_logger != null)
                        _logger.LogError(ex, sErr);
                    else
                        Console.Error.WriteLine(sErr);
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError,
                        " Internal error.");
                    await oprot.WriteMessageBeginAsync(
                        new TMessage("getGamesWithAvailableSeatsDescending", TMessageType.Exception, seqid),
                        cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }

                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot,
                CancellationToken cancellationToken);
        }

        public class InternalStructs
        {
            public class signInUserArgs : TBase
            {
                public Isset __isset;
                private string _password;
                private string _username;

                public string Username
                {
                    get => _username;
                    set
                    {
                        __isset.username = true;
                        _username = value;
                    }
                }

                public string Password
                {
                    get => _password;
                    set
                    {
                        __isset.password = true;
                        _password = value;
                    }
                }

                public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
                {
                    iprot.IncrementRecursionDepth();
                    try
                    {
                        TField field;
                        await iprot.ReadStructBeginAsync(cancellationToken);
                        while (true)
                        {
                            field = await iprot.ReadFieldBeginAsync(cancellationToken);
                            if (field.Type == TType.Stop) break;

                            switch (field.ID)
                            {
                                case 1:
                                    if (field.Type == TType.String)
                                        Username = await iprot.ReadStringAsync(cancellationToken);
                                    else
                                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                                case 2:
                                    if (field.Type == TType.String)
                                        Password = await iprot.ReadStringAsync(cancellationToken);
                                    else
                                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                                default:
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                            }

                            await iprot.ReadFieldEndAsync(cancellationToken);
                        }

                        await iprot.ReadStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        iprot.DecrementRecursionDepth();
                    }
                }

                public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
                {
                    oprot.IncrementRecursionDepth();
                    try
                    {
                        var struc = new TStruct("signInUser_args");
                        await oprot.WriteStructBeginAsync(struc, cancellationToken);
                        var field = new TField();
                        if (Username != null && __isset.username)
                        {
                            field.Name = "username";
                            field.Type = TType.String;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await oprot.WriteStringAsync(Username, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }

                        if (Password != null && __isset.password)
                        {
                            field.Name = "password";
                            field.Type = TType.String;
                            field.ID = 2;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await oprot.WriteStringAsync(Password, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }

                        await oprot.WriteFieldStopAsync(cancellationToken);
                        await oprot.WriteStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        oprot.DecrementRecursionDepth();
                    }
                }

                public signInUserArgs DeepCopy()
                {
                    var tmp4 = new signInUserArgs();
                    if (Username != null && __isset.username) tmp4.Username = Username;
                    tmp4.__isset.username = __isset.username;
                    if (Password != null && __isset.password) tmp4.Password = Password;
                    tmp4.__isset.password = __isset.password;
                    return tmp4;
                }

                public override bool Equals(object that)
                {
                    if (!(that is signInUserArgs other)) return false;
                    if (ReferenceEquals(this, other)) return true;
                    return __isset.username == other.__isset.username &&
                           (!__isset.username || Equals(Username, other.Username)) &&
                           __isset.password == other.__isset.password &&
                           (!__isset.password || Equals(Password, other.Password));
                }

                public override int GetHashCode()
                {
                    var hashcode = 157;
                    unchecked
                    {
                        if (Username != null && __isset.username) hashcode = hashcode * 397 + Username.GetHashCode();
                        if (Password != null && __isset.password) hashcode = hashcode * 397 + Password.GetHashCode();
                    }

                    return hashcode;
                }

                public override string ToString()
                {
                    var sb = new StringBuilder("signInUser_args(");
                    var tmp5 = 0;
                    if (Username != null && __isset.username)
                    {
                        if (0 < tmp5++) sb.Append(", ");
                        sb.Append("Username: ");
                        Username.ToString(sb);
                    }

                    if (Password != null && __isset.password)
                    {
                        if (0 < tmp5++) sb.Append(", ");
                        sb.Append("Password: ");
                        Password.ToString(sb);
                    }

                    sb.Append(')');
                    return sb.ToString();
                }

                public struct Isset
                {
                    public bool username;
                    public bool password;
                }
            }


            public class signInUserResult : TBase
            {
                public Isset __isset;
                private UserDto _success;

                public UserDto Success
                {
                    get => _success;
                    set
                    {
                        __isset.success = true;
                        _success = value;
                    }
                }

                public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
                {
                    iprot.IncrementRecursionDepth();
                    try
                    {
                        TField field;
                        await iprot.ReadStructBeginAsync(cancellationToken);
                        while (true)
                        {
                            field = await iprot.ReadFieldBeginAsync(cancellationToken);
                            if (field.Type == TType.Stop) break;

                            switch (field.ID)
                            {
                                case 0:
                                    if (field.Type == TType.Struct)
                                    {
                                        Success = new UserDto();
                                        await Success.ReadAsync(iprot, cancellationToken);
                                    }
                                    else
                                    {
                                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    }

                                    break;
                                default:
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                            }

                            await iprot.ReadFieldEndAsync(cancellationToken);
                        }

                        await iprot.ReadStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        iprot.DecrementRecursionDepth();
                    }
                }

                public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
                {
                    oprot.IncrementRecursionDepth();
                    try
                    {
                        var struc = new TStruct("signInUser_result");
                        await oprot.WriteStructBeginAsync(struc, cancellationToken);
                        var field = new TField();

                        if (__isset.success)
                            if (Success != null)
                            {
                                field.Name = "Success";
                                field.Type = TType.Struct;
                                field.ID = 0;
                                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                                await Success.WriteAsync(oprot, cancellationToken);
                                await oprot.WriteFieldEndAsync(cancellationToken);
                            }

                        await oprot.WriteFieldStopAsync(cancellationToken);
                        await oprot.WriteStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        oprot.DecrementRecursionDepth();
                    }
                }

                public signInUserResult DeepCopy()
                {
                    var tmp6 = new signInUserResult();
                    if (Success != null && __isset.success) tmp6.Success = Success.DeepCopy();
                    tmp6.__isset.success = __isset.success;
                    return tmp6;
                }

                public override bool Equals(object that)
                {
                    if (!(that is signInUserResult other)) return false;
                    if (ReferenceEquals(this, other)) return true;
                    return __isset.success == other.__isset.success &&
                           (!__isset.success || Equals(Success, other.Success));
                }

                public override int GetHashCode()
                {
                    var hashcode = 157;
                    unchecked
                    {
                        if (Success != null && __isset.success) hashcode = hashcode * 397 + Success.GetHashCode();
                    }

                    return hashcode;
                }

                public override string ToString()
                {
                    var sb = new StringBuilder("signInUser_result(");
                    var tmp7 = 0;
                    if (Success != null && __isset.success)
                    {
                        if (0 < tmp7++) sb.Append(", ");
                        sb.Append("Success: ");
                        Success.ToString(sb);
                    }

                    sb.Append(')');
                    return sb.ToString();
                }

                public struct Isset
                {
                    public bool success;
                }
            }


            public class signOutUserArgs : TBase
            {
                public Isset __isset;
                private string _username;

                public string Username
                {
                    get => _username;
                    set
                    {
                        __isset.username = true;
                        _username = value;
                    }
                }

                public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
                {
                    iprot.IncrementRecursionDepth();
                    try
                    {
                        TField field;
                        await iprot.ReadStructBeginAsync(cancellationToken);
                        while (true)
                        {
                            field = await iprot.ReadFieldBeginAsync(cancellationToken);
                            if (field.Type == TType.Stop) break;

                            switch (field.ID)
                            {
                                case 1:
                                    if (field.Type == TType.String)
                                        Username = await iprot.ReadStringAsync(cancellationToken);
                                    else
                                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                                default:
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                            }

                            await iprot.ReadFieldEndAsync(cancellationToken);
                        }

                        await iprot.ReadStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        iprot.DecrementRecursionDepth();
                    }
                }

                public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
                {
                    oprot.IncrementRecursionDepth();
                    try
                    {
                        var struc = new TStruct("signOutUser_args");
                        await oprot.WriteStructBeginAsync(struc, cancellationToken);
                        var field = new TField();
                        if (Username != null && __isset.username)
                        {
                            field.Name = "username";
                            field.Type = TType.String;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await oprot.WriteStringAsync(Username, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }

                        await oprot.WriteFieldStopAsync(cancellationToken);
                        await oprot.WriteStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        oprot.DecrementRecursionDepth();
                    }
                }

                public signOutUserArgs DeepCopy()
                {
                    var tmp8 = new signOutUserArgs();
                    if (Username != null && __isset.username) tmp8.Username = Username;
                    tmp8.__isset.username = __isset.username;
                    return tmp8;
                }

                public override bool Equals(object that)
                {
                    if (!(that is signOutUserArgs other)) return false;
                    if (ReferenceEquals(this, other)) return true;
                    return __isset.username == other.__isset.username &&
                           (!__isset.username || Equals(Username, other.Username));
                }

                public override int GetHashCode()
                {
                    var hashcode = 157;
                    unchecked
                    {
                        if (Username != null && __isset.username) hashcode = hashcode * 397 + Username.GetHashCode();
                    }

                    return hashcode;
                }

                public override string ToString()
                {
                    var sb = new StringBuilder("signOutUser_args(");
                    var tmp9 = 0;
                    if (Username != null && __isset.username)
                    {
                        if (0 < tmp9++) sb.Append(", ");
                        sb.Append("Username: ");
                        Username.ToString(sb);
                    }

                    sb.Append(')');
                    return sb.ToString();
                }

                public struct Isset
                {
                    public bool username;
                }
            }


            public class signUpUserArgs : TBase
            {
                public Isset __isset;
                private string _password;
                private string _username;

                public string Username
                {
                    get => _username;
                    set
                    {
                        __isset.username = true;
                        _username = value;
                    }
                }

                public string Password
                {
                    get => _password;
                    set
                    {
                        __isset.password = true;
                        _password = value;
                    }
                }

                public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
                {
                    iprot.IncrementRecursionDepth();
                    try
                    {
                        TField field;
                        await iprot.ReadStructBeginAsync(cancellationToken);
                        while (true)
                        {
                            field = await iprot.ReadFieldBeginAsync(cancellationToken);
                            if (field.Type == TType.Stop) break;

                            switch (field.ID)
                            {
                                case 1:
                                    if (field.Type == TType.String)
                                        Username = await iprot.ReadStringAsync(cancellationToken);
                                    else
                                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                                case 2:
                                    if (field.Type == TType.String)
                                        Password = await iprot.ReadStringAsync(cancellationToken);
                                    else
                                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                                default:
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                            }

                            await iprot.ReadFieldEndAsync(cancellationToken);
                        }

                        await iprot.ReadStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        iprot.DecrementRecursionDepth();
                    }
                }

                public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
                {
                    oprot.IncrementRecursionDepth();
                    try
                    {
                        var struc = new TStruct("signUpUser_args");
                        await oprot.WriteStructBeginAsync(struc, cancellationToken);
                        var field = new TField();
                        if (Username != null && __isset.username)
                        {
                            field.Name = "username";
                            field.Type = TType.String;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await oprot.WriteStringAsync(Username, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }

                        if (Password != null && __isset.password)
                        {
                            field.Name = "password";
                            field.Type = TType.String;
                            field.ID = 2;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await oprot.WriteStringAsync(Password, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }

                        await oprot.WriteFieldStopAsync(cancellationToken);
                        await oprot.WriteStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        oprot.DecrementRecursionDepth();
                    }
                }

                public signUpUserArgs DeepCopy()
                {
                    var tmp10 = new signUpUserArgs();
                    if (Username != null && __isset.username) tmp10.Username = Username;
                    tmp10.__isset.username = __isset.username;
                    if (Password != null && __isset.password) tmp10.Password = Password;
                    tmp10.__isset.password = __isset.password;
                    return tmp10;
                }

                public override bool Equals(object that)
                {
                    if (!(that is signUpUserArgs other)) return false;
                    if (ReferenceEquals(this, other)) return true;
                    return __isset.username == other.__isset.username &&
                           (!__isset.username || Equals(Username, other.Username)) &&
                           __isset.password == other.__isset.password &&
                           (!__isset.password || Equals(Password, other.Password));
                }

                public override int GetHashCode()
                {
                    var hashcode = 157;
                    unchecked
                    {
                        if (Username != null && __isset.username) hashcode = hashcode * 397 + Username.GetHashCode();
                        if (Password != null && __isset.password) hashcode = hashcode * 397 + Password.GetHashCode();
                    }

                    return hashcode;
                }

                public override string ToString()
                {
                    var sb = new StringBuilder("signUpUser_args(");
                    var tmp11 = 0;
                    if (Username != null && __isset.username)
                    {
                        if (0 < tmp11++) sb.Append(", ");
                        sb.Append("Username: ");
                        Username.ToString(sb);
                    }

                    if (Password != null && __isset.password)
                    {
                        if (0 < tmp11++) sb.Append(", ");
                        sb.Append("Password: ");
                        Password.ToString(sb);
                    }

                    sb.Append(')');
                    return sb.ToString();
                }

                public struct Isset
                {
                    public bool username;
                    public bool password;
                }
            }


            public class signUpUserResult : TBase
            {
                public Isset __isset;
                private UserDto _success;

                public UserDto Success
                {
                    get => _success;
                    set
                    {
                        __isset.success = true;
                        _success = value;
                    }
                }

                public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
                {
                    iprot.IncrementRecursionDepth();
                    try
                    {
                        TField field;
                        await iprot.ReadStructBeginAsync(cancellationToken);
                        while (true)
                        {
                            field = await iprot.ReadFieldBeginAsync(cancellationToken);
                            if (field.Type == TType.Stop) break;

                            switch (field.ID)
                            {
                                case 0:
                                    if (field.Type == TType.Struct)
                                    {
                                        Success = new UserDto();
                                        await Success.ReadAsync(iprot, cancellationToken);
                                    }
                                    else
                                    {
                                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    }

                                    break;
                                default:
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                            }

                            await iprot.ReadFieldEndAsync(cancellationToken);
                        }

                        await iprot.ReadStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        iprot.DecrementRecursionDepth();
                    }
                }

                public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
                {
                    oprot.IncrementRecursionDepth();
                    try
                    {
                        var struc = new TStruct("signUpUser_result");
                        await oprot.WriteStructBeginAsync(struc, cancellationToken);
                        var field = new TField();

                        if (__isset.success)
                            if (Success != null)
                            {
                                field.Name = "Success";
                                field.Type = TType.Struct;
                                field.ID = 0;
                                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                                await Success.WriteAsync(oprot, cancellationToken);
                                await oprot.WriteFieldEndAsync(cancellationToken);
                            }

                        await oprot.WriteFieldStopAsync(cancellationToken);
                        await oprot.WriteStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        oprot.DecrementRecursionDepth();
                    }
                }

                public signUpUserResult DeepCopy()
                {
                    var tmp12 = new signUpUserResult();
                    if (Success != null && __isset.success) tmp12.Success = Success.DeepCopy();
                    tmp12.__isset.success = __isset.success;
                    return tmp12;
                }

                public override bool Equals(object that)
                {
                    if (!(that is signUpUserResult other)) return false;
                    if (ReferenceEquals(this, other)) return true;
                    return __isset.success == other.__isset.success &&
                           (!__isset.success || Equals(Success, other.Success));
                }

                public override int GetHashCode()
                {
                    var hashcode = 157;
                    unchecked
                    {
                        if (Success != null && __isset.success) hashcode = hashcode * 397 + Success.GetHashCode();
                    }

                    return hashcode;
                }

                public override string ToString()
                {
                    var sb = new StringBuilder("signUpUser_result(");
                    var tmp13 = 0;
                    if (Success != null && __isset.success)
                    {
                        if (0 < tmp13++) sb.Append(", ");
                        sb.Append("Success: ");
                        Success.ToString(sb);
                    }

                    sb.Append(')');
                    return sb.ToString();
                }

                public struct Isset
                {
                    public bool success;
                }
            }


            public class getAllGamesArgs : TBase
            {
                public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
                {
                    iprot.IncrementRecursionDepth();
                    try
                    {
                        TField field;
                        await iprot.ReadStructBeginAsync(cancellationToken);
                        while (true)
                        {
                            field = await iprot.ReadFieldBeginAsync(cancellationToken);
                            if (field.Type == TType.Stop) break;

                            switch (field.ID)
                            {
                                default:
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                            }

                            await iprot.ReadFieldEndAsync(cancellationToken);
                        }

                        await iprot.ReadStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        iprot.DecrementRecursionDepth();
                    }
                }

                public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
                {
                    oprot.IncrementRecursionDepth();
                    try
                    {
                        var struc = new TStruct("getAllGames_args");
                        await oprot.WriteStructBeginAsync(struc, cancellationToken);
                        await oprot.WriteFieldStopAsync(cancellationToken);
                        await oprot.WriteStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        oprot.DecrementRecursionDepth();
                    }
                }

                public getAllGamesArgs DeepCopy()
                {
                    var tmp14 = new getAllGamesArgs();
                    return tmp14;
                }

                public override bool Equals(object that)
                {
                    if (!(that is getAllGamesArgs other)) return false;
                    if (ReferenceEquals(this, other)) return true;
                    return true;
                }

                public override int GetHashCode()
                {
                    var hashcode = 157;
                    unchecked
                    {
                    }

                    return hashcode;
                }

                public override string ToString()
                {
                    var sb = new StringBuilder("getAllGames_args(");
                    sb.Append(')');
                    return sb.ToString();
                }
            }


            public class getAllGamesResult : TBase
            {
                public Isset __isset;
                private List<GameDto> _success;

                public List<GameDto> Success
                {
                    get => _success;
                    set
                    {
                        __isset.success = true;
                        _success = value;
                    }
                }

                public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
                {
                    iprot.IncrementRecursionDepth();
                    try
                    {
                        TField field;
                        await iprot.ReadStructBeginAsync(cancellationToken);
                        while (true)
                        {
                            field = await iprot.ReadFieldBeginAsync(cancellationToken);
                            if (field.Type == TType.Stop) break;

                            switch (field.ID)
                            {
                                case 0:
                                    if (field.Type == TType.List)
                                    {
                                        var _list17 = await iprot.ReadListBeginAsync(cancellationToken);
                                        Success = new List<GameDto>(_list17.Count);
                                        for (var _i18 = 0; _i18 < _list17.Count; ++_i18)
                                        {
                                            GameDto _elem19;
                                            _elem19 = new GameDto();
                                            await _elem19.ReadAsync(iprot, cancellationToken);
                                            Success.Add(_elem19);
                                        }

                                        await iprot.ReadListEndAsync(cancellationToken);
                                    }
                                    else
                                    {
                                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    }

                                    break;
                                default:
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                            }

                            await iprot.ReadFieldEndAsync(cancellationToken);
                        }

                        await iprot.ReadStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        iprot.DecrementRecursionDepth();
                    }
                }

                public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
                {
                    oprot.IncrementRecursionDepth();
                    try
                    {
                        var struc = new TStruct("getAllGames_result");
                        await oprot.WriteStructBeginAsync(struc, cancellationToken);
                        var field = new TField();

                        if (__isset.success)
                            if (Success != null)
                            {
                                field.Name = "Success";
                                field.Type = TType.List;
                                field.ID = 0;
                                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                                {
                                    await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count),
                                        cancellationToken);
                                    foreach (var _iter20 in Success) await _iter20.WriteAsync(oprot, cancellationToken);
                                    await oprot.WriteListEndAsync(cancellationToken);
                                }
                                await oprot.WriteFieldEndAsync(cancellationToken);
                            }

                        await oprot.WriteFieldStopAsync(cancellationToken);
                        await oprot.WriteStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        oprot.DecrementRecursionDepth();
                    }
                }

                public getAllGamesResult DeepCopy()
                {
                    var tmp16 = new getAllGamesResult();
                    if (Success != null && __isset.success) tmp16.Success = Success.DeepCopy();
                    tmp16.__isset.success = __isset.success;
                    return tmp16;
                }

                public override bool Equals(object that)
                {
                    if (!(that is getAllGamesResult other)) return false;
                    if (ReferenceEquals(this, other)) return true;
                    return __isset.success == other.__isset.success &&
                           (!__isset.success || TCollections.Equals(Success, other.Success));
                }

                public override int GetHashCode()
                {
                    var hashcode = 157;
                    unchecked
                    {
                        if (Success != null && __isset.success)
                            hashcode = hashcode * 397 + TCollections.GetHashCode(Success);
                    }

                    return hashcode;
                }

                public override string ToString()
                {
                    var sb = new StringBuilder("getAllGames_result(");
                    var tmp21 = 0;
                    if (Success != null && __isset.success)
                    {
                        if (0 < tmp21++) sb.Append(", ");
                        sb.Append("Success: ");
                        Success.ToString(sb);
                    }

                    sb.Append(')');
                    return sb.ToString();
                }

                public struct Isset
                {
                    public bool success;
                }
            }


            public class sellSeatsArgs : TBase
            {
                public Isset __isset;
                private string _clientName;
                private GameDto _game;
                private int _seatsCount;

                public GameDto Game
                {
                    get => _game;
                    set
                    {
                        __isset.game = true;
                        _game = value;
                    }
                }

                public string ClientName
                {
                    get => _clientName;
                    set
                    {
                        __isset.clientName = true;
                        _clientName = value;
                    }
                }

                public int SeatsCount
                {
                    get => _seatsCount;
                    set
                    {
                        __isset.seatsCount = true;
                        _seatsCount = value;
                    }
                }

                public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
                {
                    iprot.IncrementRecursionDepth();
                    try
                    {
                        TField field;
                        await iprot.ReadStructBeginAsync(cancellationToken);
                        while (true)
                        {
                            field = await iprot.ReadFieldBeginAsync(cancellationToken);
                            if (field.Type == TType.Stop) break;

                            switch (field.ID)
                            {
                                case 1:
                                    if (field.Type == TType.Struct)
                                    {
                                        Game = new GameDto();
                                        await Game.ReadAsync(iprot, cancellationToken);
                                    }
                                    else
                                    {
                                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    }

                                    break;
                                case 2:
                                    if (field.Type == TType.String)
                                        ClientName = await iprot.ReadStringAsync(cancellationToken);
                                    else
                                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                                case 3:
                                    if (field.Type == TType.I32)
                                        SeatsCount = await iprot.ReadI32Async(cancellationToken);
                                    else
                                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                                default:
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                            }

                            await iprot.ReadFieldEndAsync(cancellationToken);
                        }

                        await iprot.ReadStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        iprot.DecrementRecursionDepth();
                    }
                }

                public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
                {
                    oprot.IncrementRecursionDepth();
                    try
                    {
                        var struc = new TStruct("sellSeats_args");
                        await oprot.WriteStructBeginAsync(struc, cancellationToken);
                        var field = new TField();
                        if (Game != null && __isset.game)
                        {
                            field.Name = "game";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Game.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }

                        if (ClientName != null && __isset.clientName)
                        {
                            field.Name = "clientName";
                            field.Type = TType.String;
                            field.ID = 2;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await oprot.WriteStringAsync(ClientName, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }

                        if (__isset.seatsCount)
                        {
                            field.Name = "seatsCount";
                            field.Type = TType.I32;
                            field.ID = 3;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await oprot.WriteI32Async(SeatsCount, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }

                        await oprot.WriteFieldStopAsync(cancellationToken);
                        await oprot.WriteStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        oprot.DecrementRecursionDepth();
                    }
                }

                public sellSeatsArgs DeepCopy()
                {
                    var tmp22 = new sellSeatsArgs();
                    if (Game != null && __isset.game) tmp22.Game = Game.DeepCopy();
                    tmp22.__isset.game = __isset.game;
                    if (ClientName != null && __isset.clientName) tmp22.ClientName = ClientName;
                    tmp22.__isset.clientName = __isset.clientName;
                    if (__isset.seatsCount) tmp22.SeatsCount = SeatsCount;
                    tmp22.__isset.seatsCount = __isset.seatsCount;
                    return tmp22;
                }

                public override bool Equals(object that)
                {
                    if (!(that is sellSeatsArgs other)) return false;
                    if (ReferenceEquals(this, other)) return true;
                    return __isset.game == other.__isset.game && (!__isset.game || Equals(Game, other.Game)) &&
                           __isset.clientName == other.__isset.clientName &&
                           (!__isset.clientName || Equals(ClientName, other.ClientName)) &&
                           __isset.seatsCount == other.__isset.seatsCount &&
                           (!__isset.seatsCount || Equals(SeatsCount, other.SeatsCount));
                }

                public override int GetHashCode()
                {
                    var hashcode = 157;
                    unchecked
                    {
                        if (Game != null && __isset.game) hashcode = hashcode * 397 + Game.GetHashCode();
                        if (ClientName != null && __isset.clientName)
                            hashcode = hashcode * 397 + ClientName.GetHashCode();
                        if (__isset.seatsCount) hashcode = hashcode * 397 + SeatsCount.GetHashCode();
                    }

                    return hashcode;
                }

                public override string ToString()
                {
                    var sb = new StringBuilder("sellSeats_args(");
                    var tmp23 = 0;
                    if (Game != null && __isset.game)
                    {
                        if (0 < tmp23++) sb.Append(", ");
                        sb.Append("Game: ");
                        Game.ToString(sb);
                    }

                    if (ClientName != null && __isset.clientName)
                    {
                        if (0 < tmp23++) sb.Append(", ");
                        sb.Append("ClientName: ");
                        ClientName.ToString(sb);
                    }

                    if (__isset.seatsCount)
                    {
                        if (0 < tmp23++) sb.Append(", ");
                        sb.Append("SeatsCount: ");
                        SeatsCount.ToString(sb);
                    }

                    sb.Append(')');
                    return sb.ToString();
                }

                public struct Isset
                {
                    public bool game;
                    public bool clientName;
                    public bool seatsCount;
                }
            }


            public class sellSeatsResult : TBase
            {
                public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
                {
                    iprot.IncrementRecursionDepth();
                    try
                    {
                        TField field;
                        await iprot.ReadStructBeginAsync(cancellationToken);
                        while (true)
                        {
                            field = await iprot.ReadFieldBeginAsync(cancellationToken);
                            if (field.Type == TType.Stop) break;

                            switch (field.ID)
                            {
                                default:
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                            }

                            await iprot.ReadFieldEndAsync(cancellationToken);
                        }

                        await iprot.ReadStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        iprot.DecrementRecursionDepth();
                    }
                }

                public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
                {
                    oprot.IncrementRecursionDepth();
                    try
                    {
                        var struc = new TStruct("sellSeats_result");
                        await oprot.WriteStructBeginAsync(struc, cancellationToken);
                        await oprot.WriteFieldStopAsync(cancellationToken);
                        await oprot.WriteStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        oprot.DecrementRecursionDepth();
                    }
                }

                public sellSeatsResult DeepCopy()
                {
                    var tmp24 = new sellSeatsResult();
                    return tmp24;
                }

                public override bool Equals(object that)
                {
                    if (!(that is sellSeatsResult other)) return false;
                    if (ReferenceEquals(this, other)) return true;
                    return true;
                }

                public override int GetHashCode()
                {
                    var hashcode = 157;
                    unchecked
                    {
                    }

                    return hashcode;
                }

                public override string ToString()
                {
                    var sb = new StringBuilder("sellSeats_result(");
                    sb.Append(')');
                    return sb.ToString();
                }
            }


            public class getGamesWithAvailableSeatsDescendingArgs : TBase
            {
                public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
                {
                    iprot.IncrementRecursionDepth();
                    try
                    {
                        TField field;
                        await iprot.ReadStructBeginAsync(cancellationToken);
                        while (true)
                        {
                            field = await iprot.ReadFieldBeginAsync(cancellationToken);
                            if (field.Type == TType.Stop) break;

                            switch (field.ID)
                            {
                                default:
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                            }

                            await iprot.ReadFieldEndAsync(cancellationToken);
                        }

                        await iprot.ReadStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        iprot.DecrementRecursionDepth();
                    }
                }

                public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
                {
                    oprot.IncrementRecursionDepth();
                    try
                    {
                        var struc = new TStruct("getGamesWithAvailableSeatsDescending_args");
                        await oprot.WriteStructBeginAsync(struc, cancellationToken);
                        await oprot.WriteFieldStopAsync(cancellationToken);
                        await oprot.WriteStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        oprot.DecrementRecursionDepth();
                    }
                }

                public getGamesWithAvailableSeatsDescendingArgs DeepCopy()
                {
                    var tmp26 = new getGamesWithAvailableSeatsDescendingArgs();
                    return tmp26;
                }

                public override bool Equals(object that)
                {
                    if (!(that is getGamesWithAvailableSeatsDescendingArgs other)) return false;
                    if (ReferenceEquals(this, other)) return true;
                    return true;
                }

                public override int GetHashCode()
                {
                    var hashcode = 157;
                    unchecked
                    {
                    }

                    return hashcode;
                }

                public override string ToString()
                {
                    var sb = new StringBuilder("getGamesWithAvailableSeatsDescending_args(");
                    sb.Append(')');
                    return sb.ToString();
                }
            }


            public class getGamesWithAvailableSeatsDescendingResult : TBase
            {
                public Isset __isset;
                private List<GameDto> _success;

                public List<GameDto> Success
                {
                    get => _success;
                    set
                    {
                        __isset.success = true;
                        _success = value;
                    }
                }

                public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
                {
                    iprot.IncrementRecursionDepth();
                    try
                    {
                        TField field;
                        await iprot.ReadStructBeginAsync(cancellationToken);
                        while (true)
                        {
                            field = await iprot.ReadFieldBeginAsync(cancellationToken);
                            if (field.Type == TType.Stop) break;

                            switch (field.ID)
                            {
                                case 0:
                                    if (field.Type == TType.List)
                                    {
                                        var _list29 = await iprot.ReadListBeginAsync(cancellationToken);
                                        Success = new List<GameDto>(_list29.Count);
                                        for (var _i30 = 0; _i30 < _list29.Count; ++_i30)
                                        {
                                            GameDto _elem31;
                                            _elem31 = new GameDto();
                                            await _elem31.ReadAsync(iprot, cancellationToken);
                                            Success.Add(_elem31);
                                        }

                                        await iprot.ReadListEndAsync(cancellationToken);
                                    }
                                    else
                                    {
                                        await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    }

                                    break;
                                default:
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                    break;
                            }

                            await iprot.ReadFieldEndAsync(cancellationToken);
                        }

                        await iprot.ReadStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        iprot.DecrementRecursionDepth();
                    }
                }

                public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
                {
                    oprot.IncrementRecursionDepth();
                    try
                    {
                        var struc = new TStruct("getGamesWithAvailableSeatsDescending_result");
                        await oprot.WriteStructBeginAsync(struc, cancellationToken);
                        var field = new TField();

                        if (__isset.success)
                            if (Success != null)
                            {
                                field.Name = "Success";
                                field.Type = TType.List;
                                field.ID = 0;
                                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                                {
                                    await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count),
                                        cancellationToken);
                                    foreach (var _iter32 in Success) await _iter32.WriteAsync(oprot, cancellationToken);
                                    await oprot.WriteListEndAsync(cancellationToken);
                                }
                                await oprot.WriteFieldEndAsync(cancellationToken);
                            }

                        await oprot.WriteFieldStopAsync(cancellationToken);
                        await oprot.WriteStructEndAsync(cancellationToken);
                    }
                    finally
                    {
                        oprot.DecrementRecursionDepth();
                    }
                }

                public getGamesWithAvailableSeatsDescendingResult DeepCopy()
                {
                    var tmp28 = new getGamesWithAvailableSeatsDescendingResult();
                    if (Success != null && __isset.success) tmp28.Success = Success.DeepCopy();
                    tmp28.__isset.success = __isset.success;
                    return tmp28;
                }

                public override bool Equals(object that)
                {
                    if (!(that is getGamesWithAvailableSeatsDescendingResult other)) return false;
                    if (ReferenceEquals(this, other)) return true;
                    return __isset.success == other.__isset.success &&
                           (!__isset.success || TCollections.Equals(Success, other.Success));
                }

                public override int GetHashCode()
                {
                    var hashcode = 157;
                    unchecked
                    {
                        if (Success != null && __isset.success)
                            hashcode = hashcode * 397 + TCollections.GetHashCode(Success);
                    }

                    return hashcode;
                }

                public override string ToString()
                {
                    var sb = new StringBuilder("getGamesWithAvailableSeatsDescending_result(");
                    var tmp33 = 0;
                    if (Success != null && __isset.success)
                    {
                        if (0 < tmp33++) sb.Append(", ");
                        sb.Append("Success: ");
                        Success.ToString(sb);
                    }

                    sb.Append(')');
                    return sb.ToString();
                }

                public struct Isset
                {
                    public bool success;
                }
            }
        }
    }
}