/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Text;
using System.Threading;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


namespace Services.Thrift.DataTransfer
{
  public partial class GameDto : TBase
  {
    private int _gameId;
    private string _name;
    private string _homeTeam;
    private string _awayTeam;
    private int _availableSeats;
    private int _seatCost;

    public int GameId
    {
      get
      {
        return _gameId;
      }
      set
      {
        __isset.gameId = true;
        this._gameId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string HomeTeam
    {
      get
      {
        return _homeTeam;
      }
      set
      {
        __isset.homeTeam = true;
        this._homeTeam = value;
      }
    }

    public string AwayTeam
    {
      get
      {
        return _awayTeam;
      }
      set
      {
        __isset.awayTeam = true;
        this._awayTeam = value;
      }
    }

    public int AvailableSeats
    {
      get
      {
        return _availableSeats;
      }
      set
      {
        __isset.availableSeats = true;
        this._availableSeats = value;
      }
    }

    public int SeatCost
    {
      get
      {
        return _seatCost;
      }
      set
      {
        __isset.seatCost = true;
        this._seatCost = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool gameId;
      public bool name;
      public bool homeTeam;
      public bool awayTeam;
      public bool availableSeats;
      public bool seatCost;
    }

    public GameDto()
    {
    }

    public GameDto DeepCopy()
    {
      var tmp2 = new GameDto();
      if(__isset.gameId)
      {
        tmp2.GameId = this.GameId;
      }
      tmp2.__isset.gameId = this.__isset.gameId;
      if((Name != null) && __isset.name)
      {
        tmp2.Name = this.Name;
      }
      tmp2.__isset.name = this.__isset.name;
      if((HomeTeam != null) && __isset.homeTeam)
      {
        tmp2.HomeTeam = this.HomeTeam;
      }
      tmp2.__isset.homeTeam = this.__isset.homeTeam;
      if((AwayTeam != null) && __isset.awayTeam)
      {
        tmp2.AwayTeam = this.AwayTeam;
      }
      tmp2.__isset.awayTeam = this.__isset.awayTeam;
      if(__isset.availableSeats)
      {
        tmp2.AvailableSeats = this.AvailableSeats;
      }
      tmp2.__isset.availableSeats = this.__isset.availableSeats;
      if(__isset.seatCost)
      {
        tmp2.SeatCost = this.SeatCost;
      }
      tmp2.__isset.seatCost = this.__isset.seatCost;
      return tmp2;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                GameId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                HomeTeam = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                AwayTeam = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                AvailableSeats = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I32)
              {
                SeatCost = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GameDto");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if(__isset.gameId)
        {
          field.Name = "gameId";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(GameId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null) && __isset.name)
        {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((HomeTeam != null) && __isset.homeTeam)
        {
          field.Name = "homeTeam";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(HomeTeam, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((AwayTeam != null) && __isset.awayTeam)
        {
          field.Name = "awayTeam";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(AwayTeam, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.availableSeats)
        {
          field.Name = "availableSeats";
          field.Type = TType.I32;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(AvailableSeats, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.seatCost)
        {
          field.Name = "seatCost";
          field.Type = TType.I32;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(SeatCost, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is GameDto other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.gameId == other.__isset.gameId) && ((!__isset.gameId) || (System.Object.Equals(GameId, other.GameId))))
             && ((__isset.name == other.__isset.name) && ((!__isset.name) || (System.Object.Equals(Name, other.Name))))
             && ((__isset.homeTeam == other.__isset.homeTeam) && ((!__isset.homeTeam) || (System.Object.Equals(HomeTeam, other.HomeTeam))))
             && ((__isset.awayTeam == other.__isset.awayTeam) && ((!__isset.awayTeam) || (System.Object.Equals(AwayTeam, other.AwayTeam))))
             && ((__isset.availableSeats == other.__isset.availableSeats) && ((!__isset.availableSeats) || (System.Object.Equals(AvailableSeats, other.AvailableSeats))))
             && ((__isset.seatCost == other.__isset.seatCost) && ((!__isset.seatCost) || (System.Object.Equals(SeatCost, other.SeatCost))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.gameId)
        {
          hashcode = (hashcode * 397) + GameId.GetHashCode();
        }
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((HomeTeam != null) && __isset.homeTeam)
        {
          hashcode = (hashcode * 397) + HomeTeam.GetHashCode();
        }
        if((AwayTeam != null) && __isset.awayTeam)
        {
          hashcode = (hashcode * 397) + AwayTeam.GetHashCode();
        }
        if(__isset.availableSeats)
        {
          hashcode = (hashcode * 397) + AvailableSeats.GetHashCode();
        }
        if(__isset.seatCost)
        {
          hashcode = (hashcode * 397) + SeatCost.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GameDto(");
      int tmp3 = 0;
      if(__isset.gameId)
      {
        if(0 < tmp3++) { sb.Append(", "); }
        sb.Append("GameId: ");
        GameId.ToString(sb);
      }
      if((Name != null) && __isset.name)
      {
        if(0 < tmp3++) { sb.Append(", "); }
        sb.Append("Name: ");
        Name.ToString(sb);
      }
      if((HomeTeam != null) && __isset.homeTeam)
      {
        if(0 < tmp3++) { sb.Append(", "); }
        sb.Append("HomeTeam: ");
        HomeTeam.ToString(sb);
      }
      if((AwayTeam != null) && __isset.awayTeam)
      {
        if(0 < tmp3++) { sb.Append(", "); }
        sb.Append("AwayTeam: ");
        AwayTeam.ToString(sb);
      }
      if(__isset.availableSeats)
      {
        if(0 < tmp3++) { sb.Append(", "); }
        sb.Append("AvailableSeats: ");
        AvailableSeats.ToString(sb);
      }
      if(__isset.seatCost)
      {
        if(0 < tmp3++) { sb.Append(", "); }
        sb.Append("SeatCost: ");
        SeatCost.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }
}

