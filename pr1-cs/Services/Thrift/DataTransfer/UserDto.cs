/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Text;
using System.Threading;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


namespace Services.Thrift.DataTransfer
{
  public partial class UserDto : TBase
  {
    private string _username;
    private string _password;

    public string Username
    {
      get
      {
        return _username;
      }
      set
      {
        __isset.username = true;
        this._username = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool username;
      public bool password;
    }

    public UserDto()
    {
    }

    public UserDto DeepCopy()
    {
      var tmp0 = new UserDto();
      if((Username != null) && __isset.username)
      {
        tmp0.Username = this.Username;
      }
      tmp0.__isset.username = this.__isset.username;
      if((Password != null) && __isset.password)
      {
        tmp0.Password = this.Password;
      }
      tmp0.__isset.password = this.__isset.password;
      return tmp0;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Username = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Password = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UserDto");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if((Username != null) && __isset.username)
        {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Username, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Password != null) && __isset.password)
        {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Password, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is UserDto other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.username == other.__isset.username) && ((!__isset.username) || (System.Object.Equals(Username, other.Username))))
             && ((__isset.password == other.__isset.password) && ((!__isset.password) || (System.Object.Equals(Password, other.Password))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Username != null) && __isset.username)
        {
          hashcode = (hashcode * 397) + Username.GetHashCode();
        }
        if((Password != null) && __isset.password)
        {
          hashcode = (hashcode * 397) + Password.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UserDto(");
      int tmp1 = 0;
      if((Username != null) && __isset.username)
      {
        if(0 < tmp1++) { sb.Append(", "); }
        sb.Append("Username: ");
        Username.ToString(sb);
      }
      if((Password != null) && __isset.password)
      {
        if(0 < tmp1++) { sb.Append(", "); }
        sb.Append("Password: ");
        Password.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }
}

